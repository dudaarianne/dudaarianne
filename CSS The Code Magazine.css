@charset "utf-8";
/* CSS Document */
/*Default font size: 16px*/
/*ID (never to be used): Can only be used once. Selector = #
Class: can be used multiple times. Selector = . */
/*Universal selector: add elements that don't get inherited*/
* {
/*  border-top: 10px solid #1098AD*/
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

body {
  color: #444444;
  font-family: sans-serif;  
  border-top: 10px solid #1098AD;
  position: relative
}

.container {
  width: 1200px;
  margin-left: auto;
  margin-right: auto;
  margin: 0 auto;
/*  position: relative;*/
}


.main-header {
  background-color: #f7f7f7; 
  padding: 20px 40px;
/*  margin-bottom: 60px;*/
/*  height: 80px;*/
}

nav {
  font-size: 18px;
}

article {
/*  margin-bottom: 60px;*/
}
  
.post-header {
  margin-bottom: 40px;
}

aside {
  background-color: #f7f7f7;
  border-top: 5px solid #1098AD;
  border-bottom: 5px solid #1098AD;
  padding: 50px 40px;
}

/*box-sizing: border-box
Final element width = width defined on the code
Final element height = height defined on the code
Default behavior = box-sizing: content-box
*/


h1, h2, h3 {
  color: #1098AD;
}

h1 {
  font-size: 26px;
  text-transform: uppercase;
  font-style: italic;
}

h2 {
  font-size: 40px;
  margin-bottom: 30px;
}

h3 {
  font-size: 30px;
  margin-bottom: 20px;
  margin-top: 40px;
}

h4 {
  font-size: 20px;
  text-transform: uppercase;
  text-align: center;
  margin-bottom: 30px;
}

p {
  font-size: 22px;
  line-height: 1.5;
  margin-bottom: 15px;
}

ul, ol {
  margin-left: 50px;
  margin-bottom: 20px;
}

li {
  font-size: 20px;
  margin-bottom: 10px;
}
  
li:last-child {
    margin-bottom: 0;
  }
  

/*
footer p {
  font-size: 16px;
}
*/

/*
header p {
  font-style: italic;
}
*/

#author {
  font-style: italic;
  font-size: 18px;
}

#copyright {
  font-size: 16px;
}

.related-author {
  font-size: 18px;
  font-weight: bold;
}

.related {
  list-style: none;
  margin-left: 0;
}

/*
body {
  background-color: orangered
}*/

/*
.first-li {
  font-weight: bold;
}
*/

/*Pseudo-classes*/
li:first-child {
  font-weight: bold;
}

li:last-child {
  font-style: italic
}

/*
li:nth-child(even) {
  color: red;
}
*/

/*
article p:last-child {
  color: red;  
}
*/

/*Styling links LVHA*/
a:link {
  color: #1098AD;
  text-decoration: none;
}

a:visited {
/*  color: #777777;*/
  color: #1098AD;
}

a:hover {
  color: orangered;
  font-weight: bold;
  text-decoration: underline wavy orangered;
}

a:active {
  background-color: black;
  font-style: italic
}

.post-img {
  width: 100%;
  height: auto;
}

nav a:link {
  margin-right: 30px;
/*  margin-top: 10px;*/
  display: inline-block;  
}

nav a:link:last-child {
  margin-right: 0;
}

button {
  position: absolute;
  bottom: 50px;
  right: 50px;
  font-size: 22px;
  padding: 20px;
  cursor: pointer;
}

/*Pseudo-Elements*/
h1::first-letter {
  font-style: normal;
  margin-right: 5px;
}

/*
h2::first-letter {
  font-size: 80px
}
*/

/*Adjacent Sibling*/
/*
h3 + p::first-line {
  color: red;
}
*/

h2 {
  position: relative;
}

h2::after {
  content: "TOP";
  color: #444444;
  background-color: #FFE70E;
  font-size: 16px;
  font-weight: bold;
  display: inline-block;
  padding: 5px 10px;
  position: absolute;
  top: -10px;
  right: -25px;  
}

/*Resolving Conflicting Declarations:
Declaration marked !important > 
Inline style (style attribute in HTML) >
ID (#) selector > 
Class (.) or pseudo-class (:) selector > 
Element selector (p, div, li, etc.) > 
Universal selector (*)
*/

/*
THE CSS BOX MODEL:
Content: text, images, etc. --> width and height;
Border: a line around the element, still inside de element;
Padding: invisible space around the content, inside the element;
Margin: Space outside of the element, between elements;
Fill area: Area that gets filled with background color or background image.

ELEMENT HEIGHT AND WIDTH CALCULATION:
Final element width = left border + left padding + width + right padding + right border;
Final element height = top border + top padding + height + bottom padding + bottom border;
--> We can specify all these values using CSS properties;
--> This is the default behaviour, but we can change it.

BLOCK-LEVEL ELEMENTS:
--> Elements are formatted visually as blocks;
--> Elements occupy 100% of parent element's width;
--> Elements are stacked vertically by default, one after another;
Default elements: body, main, header, footer, section, nav, aside, div, h1-h6, p, ul, ol, li, etc.
With CSS: display: block

INLINE ELEMENTS:
--> Occupies only the space necessary for its content;
--> Causes no line breaks after or before the element;
--> Box model applies in a different way: heights and widths do not apply;
--> Paddings and margins are applied only horizontaly (left and right)
Default elements: a, img, strong, em, button, etc.
With CSS: display: inline

INLINE-BLOCK BOXES:
--> Looks like inline from the outside, behaves like block-level on the inside.
--> Occupies only content's space;
--> Causes no line-breaks;
--> Box-model applies as showed
With CSS: display: inline-block

NORMAL FLOW VS. ABSOLUTE POSITIONING:
Normal Flow:
--> Default positioning;
--> Element is "in flow"
--> Elements are simply laid out according to their order in the HTML code;
With CSS: position: relative

Absolute Positioning:
--> Element is removed from the normal flow: "out of flow";
--> No impact in surronding elements, might overlap them;
--> We use top, bottom, left or right to offset the element from its relatively positioned container.
With CSS: position: absolute

Googling:
stackoverflow --> Q&A
MDN --> documentation
validator.w3.org --> HTML validator
diffchecker.com --> compair codes

THE 3 WAYS OF BUILDING LAYOUTS WITH CSS
1. Float Layouts: The old way of building layouts of all sizes, using the float CSS property. Still used but getting outdated fast.
2. Flexbox: Modern way of laying out elements in a 1-dimensional row without using floats. Perfect for component layouts.
3. CSS Grid: For laying out element in a fully fledged 2-dimensional grid. Perfect for paga layouts and complex components.
*/

/*FLOATS*/
/*
.author-img {
  float: left;
  margin-bottom: 20px;  
}

.author {
  padding-left: 80px;
  float: left;
  margin-top: 10px;
  margin-left: 20px;  
}

h1 {
  float: left;
}

nav {
  float: right;
}

.clear {
  clear: both;
}

.clearfix::after {
  content: "";
  clear: both;
  display: block;
}
article {
  width: 825px;
  float: left;
}

aside {
  width: 300px;
  float: right;
  
}

footer {
  clear: both;
  
}
*/
/*ABSOLUTE POSITIONING VS. FLOATS
Floats:
--> Element is removed from the normal flow: "out of flow"; = Absolute Positioning
--> Text and inline elements will wrap around the floated element; # Absolute Positioning
--> The container will not adjust its height to the element.
With CSS: float: left and float: right
*/

/*Flexbox*/
.main-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.author-box {
  display: flex;
  align-items: center;
  gap: 15px;
  margin-bottom: 15px;
}

.author {
  margin: 0;
}

.related-post {
  display: flex;
  align-items: center;
  gap: 20px; 
  margin-bottom: 30px;
}

.related-link:link {
  font-size: 17px;
  font-weight: bold;
  font-style: normal;
  display: block;
  margin-bottom: 5px;
}

.related-author {
  margin: 0;
  font-size: 14px;
  font-weight: normal;
  font-style: italic;
}

/*
.page {
  display: flex;
  align-items: flex-start; 
  gap: 75px;
  margin-bottom: 60px;
   
}

article {
  flex: 1;
  margin-bottom: 0;
}

aside {
  flex: 0 0 300px;
}
*/

/*CSS GRID*/
.container {
  display: grid;
  grid-template-columns: 1fr 300px;
  column-gap: 75px;
  row-gap: 60px;
  align-items: flex-start;
}

.main-header {
  grid-column: 1 / -1;
  
}

footer {
  grid-column: 1 / -1
  
}








